classDiagram
    %% Backend Core
    class Backend {
        +start() : void
        +stop() : void
        +restart() : void
    }
    class ConfigModule {
        +PORT : int
        +DB_PATH : string
        +SESSION_TIMEOUT : int
        +CORS_ORIGIN : string
        +AUTH0_DOMAIN : string
        +AUTH0_CLIENT_ID : string
    }
    class Database {
        +connect() : connection
        +executeQuery(sql) : result
        +initDb() : void
        +physics tables
        +users/sessions tables
    }

    %% WebSocket Infrastructure
    class WebSocketAdapter {
        +handleConnection(env) : handler
        +dispatch(message) : void
        +broadcastPhysicsSync(state) : void
    }
    class CanvasRoom {
        -canvasId : string
        -clients : Map
        -physicsEngine : PhysicsLoop
        +addClient(client) : void
        +removeClient(client) : void
        +handleMessage(message) : void
        +broadcastToAll(message) : void
        +syncPhysicsState() : void
    }

    %% Authentication
    class AuthModule {
        +registerUser(email, password, username) : result
        +loginUser(email, password) : sessionResult
        +verifySession(sessionId) : bool
    }
    class Auth0Module {
        +verifyJWT(token) : claims
        +getAuth0User(accessToken) : userInfo
        +handleCallback(code) : tokens
    }
    class AuthMetrics {
        +trackLogin(method) : void
        +trackRegistration(method) : void
    }

    %% Canvas & State
    class CanvasStateModule {
        +saveState(canvasId, state) : void
        +loadState(canvasId) : json
    }
    class AIAgentModule {
        +processCommand(command, state) : operations
        +callClaudeAPI(prompt) : response
    }

    %% Physics Engine (ECS)
    class PhysicsECS {
        +make-storage() : storage
        +define-component(name, slots) : component
        +define-system(name, logic) : system
    }
    class PhysicsComponents {
        +position : (x, y)
        +velocity : (vx, vy)
        +ball : (radius, mass)
        +fan : (force, direction)
        +block : (width, height)
    }
    class PhysicsSystems {
        +apply-forces-system
        +collision-system
        +boundary-system
        +fan-system
        +magnet-system
    }
    class PhysicsLoop {
        -storage : ECS.Storage
        -running : bool
        -config : physics-canvas-config
        +init-canvas-physics(canvasId) : void
        +start-physics-loop() : void
        +stop-physics-loop() : void
        +run-tick(dt) : void
    }
    class PhysicsQuadtree {
        +make-physics-quadtree(w, h) : quadtree
        +insert-entity-bounds(qt, id, x, y, r) : void
        +query-nearby-entities(qt, x, y, r) : entities
        +clear-physics-quadtree(qt) : void
    }
    class PhysicsDatabase {
        +save-physics-settings(canvasId, settings) : void
        +load-physics-settings(canvasId) : settings
        +save-component(component) : void
    }
    class PhysicsMetrics {
        +track-frame-time(dt) : void
        +track-collision-count(n) : void
        +get-stats() : metrics
    }

    %% Frontend Core
    class Frontend {
        +init() : void
        +initCanvas() : void
        +connectWebSocket() : void
    }
    class CanvasManager {
        -app : PIXI.Application
        -viewport : PIXI.Container
        -objects : Map
        -remoteCursors : Map
        +pan/zoom
        +createRectangle/Circle/Text()
        +updateObject(id, updates) : void
        +deleteObject(id) : void
    }
    class WebSocketClient {
        -ws : WebSocket
        +connect(url) : void
        +send(message) : void
        +handleMessage(data) : void
        +handlePhysicsSync(data) : void
    }
    class AuthManager {
        +showAuthUI() : void
        +handleLogin() : sessionId
        +handleAuth0Login() : void
        +isAuthenticated() : bool
    }

    %% Frontend Physics
    class PhysicsPredictor {
        +predictBallPosition(ball, dt) : position
        +createGhost(ball) : ghostBall
        +applySimplePhysics(ghost, dt) : void
    }
    class PhysicsRenderer {
        +renderBall(ball, graphics) : void
        +renderFan(fan, graphics) : void
        +renderParticles(emitter) : void
        +updateVisuals(dt) : void
    }
    class PhysicsUI {
        +createControlPanel() : UI
        +updateMetrics(stats) : void
        +handleToolSelection(tool) : void
    }

    %% External Libraries
    class PixiJS {
        <<external library>>
        +Application
        +Graphics
    }
    class cl_fast_ecs {
        <<external library>>
        ECS framework
    }
    class quadtree_lib {
        <<external library>>
        Spatial partitioning
    }

    %% Backend relationships
    Backend --> ConfigModule
    Backend --> Database
    Backend --> WebSocketAdapter
    Backend --> AuthModule
    Backend --> Auth0Module
    Backend --> CanvasStateModule
    Backend --> AIAgentModule
    Backend --> PhysicsLoop

    WebSocketAdapter --> CanvasRoom
    CanvasRoom --> PhysicsLoop

    AuthModule --> Database
    Auth0Module --> AuthModule
    AuthMetrics --> Database

    PhysicsLoop --> PhysicsECS
    PhysicsLoop --> PhysicsComponents
    PhysicsLoop --> PhysicsSystems
    PhysicsLoop --> PhysicsQuadtree
    PhysicsLoop --> PhysicsMetrics
    PhysicsDatabase --> Database

    PhysicsECS --> cl_fast_ecs
    PhysicsQuadtree --> quadtree_lib
    PhysicsSystems --> PhysicsComponents

    %% Frontend relationships
    Frontend --> CanvasManager
    Frontend --> WebSocketClient
    Frontend --> AuthManager
    Frontend --> PhysicsPredictor
    Frontend --> PhysicsRenderer
    Frontend --> PhysicsUI

    CanvasManager --> PixiJS
    PhysicsRenderer --> PixiJS
    CanvasManager <--> WebSocketClient
    PhysicsPredictor --> WebSocketClient

    %% Client-Server communication
    WebSocketClient <--> WebSocketAdapter : WebSocket
    AuthManager <--> Auth0Module : OAuth2
